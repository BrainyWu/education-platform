"""
Django settings for MxOnline project.

Generated by 'django-admin startproject' using Django 1.9.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""
import os
import sys
import datetime
from logging import config as logging_config

import configparser
import environ

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))
sys.path.insert(0, os.path.join(BASE_DIR, 'extra_apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/
CONF_PATH = os.path.join(BASE_DIR, 'conf')

# LOG SETTING
LOG_PATH = os.path.join(BASE_DIR, "logs")
if not os.path.exists(LOG_PATH):
    os.mkdir(LOG_PATH)
logging_config.fileConfig(os.path.join(CONF_PATH, 'logging.ini'))

# ENV SETTING
env = environ.Env()
READ_DOT_ENV_FILE = env.bool('DJANGO_READ_DOT_ENV_FILE', default=True)
if READ_DOT_ENV_FILE:
    env.read_env(os.path.join(CONF_PATH, '.env'))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'i2bjs06=#v_608z^d%qaz=1m9&8wldxwt9r+80^qfbmo-r#@k@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DJANGO_DEBUG', False)

# https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts
ALLOWED_HOSTS = env.list('DJANGO_ALLOWED_HOSTS')
AUTH_USER_MODEL = 'users.UserProfile'
ROOT_URLCONF = 'MxOnline.urls'

# apps
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]
THIRD_PARTY_APPS = [
    'channels',
    'crispy_forms',
    'captcha',
    'pure_pagination',
    'DjangoUeditor',
    'django_filters',
    'rest_framework',
    'rest_framework.authtoken',
]
LOCAL_APPS = [
    'users',
    'courses',
    'organization',
    'operation',
    'notifications',
    'xadmin',
]
INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # 'django.core.context_processors.media',
                'django.template.context_processors.media'
            ],
        },
    },
]

WSGI_APPLICATION = 'MxOnline.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': env('MYSQL_DB_ENGINE', default=env.DB_SCHEMES.get('mysql')),
        'NAME': env('MYSQL_DB_NAME', default='project_education'),
        'USER': env('MYSQL_DB_USER'),
        'PASSWORD': env('MYSQL_DB_PASSWORD'),
        'HOST': env('MYSQL_DB_HOST'),
        'CONN_MAX_AGE': env('MYSQL_DB_CONN_MAX_AGE', default=100),
    }
}

# 缓存
CACHES = {
    "default": {
        "BACKEND": env.CACHE_SCHEMES.get('rediscache'),
        "LOCATION": env('DEFAULT_CACHE_LOCATION'),
        "TIMEOUT": env('DEFAULT_CACHE_TIMEOUT', default=300),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {
                "max_connections": env('DEFAULT_CACHE_MAX_CONNECTIONS', default=100),
            }
            # "PASSWORD":"xxxxxx" # 可能需要密码
        }
    },
    "cache1": {
        "BACKEND": env.CACHE_SCHEMES.get('rediscache'),
        "LOCATION": env('CACHEONE_LOCATION'),
        "TIMEOUT": env('CACHEONE_TIMEOUT', default=1800),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {
                "max_connections": env('CACHEONE_MAX_CONNECTIONS', default=100),
                # 避免转码，直接对原数据进行操作, 默认False
                "decode_responses": True,
            }
        }
    },
}

# ASGI server setup
ASGI_APPLICATION = 'MxOnline.routing.application'
# 频道层的缓存
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": env.list('CL_CACHE_HOSTS'),
        },
    },
}

# REST_FRAMEWORK_EXTENSIONS = {
#
# }

# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# custom auth
AUTHENTICATION_BACKENDS = (
    'users.views.CustomBackend',
)

# 配置session存储
SESSION_ENGINE = env('SESSION_ENGINE')
SESSION_COOKIE_NAME = "SID"
SESSION_REDIS = {
    'host': env('SESSION_HOST'),
    'port': env('SESSION_PORT', default=6379),
    'db': env('SESSION_DB', default=1),
    'password': env('SESSION_PASSWORD'),
    'prefix': env('SESSION_PREFIX', default='session'),
    'socket_timeout': env('SESSION_SOCKET_TIMEOUT', default=1),
    # 修改redis-seesion源码添加自定义过期时间
    'expiry': env('SESSION_EXPIRY', default=60 * 60 * 24)
}

REST_FRAMEWORK = {
    # api接口文档配置
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    # 自定义exception_handler
    'EXCEPTION_HANDLER': 'lib.exceptions.custom_exception_handler',
    # drf全局认证，优先级从上往下
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    # drf全局过滤器
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ),
    # throttling限速机制
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '30/minute',
        'user': '30/minute'
    },
}

JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=7),
    'JWT_AUTH_HEADER_PREFIX': 'JWT',
}

# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'
USE_I18N = True
USE_L10N = True
USE_TZ = False

# https://docs.djangoproject.com/en/dev/ref/settings/#email-backend
EMAIL_BACKEND = env('EMAIL_BACKEND', default=env.EMAIL_SCHEMES.get('smtp'))
# https://docs.djangoproject.com/en/dev/ref/settings/#email-host
EMAIL_HOST = env('EMAIL_HOST')
# https://docs.djangoproject.com/en/dev/ref/settings/#email-port
EMAIL_USE_SSL = env('EMAIL_USE_SSL', default=True)
EMAIL_PORT = env('EMAIL_PORT', default=25)
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
